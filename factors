#!/usr/bin/python3
from random import randint


def GCDF(r, t):
    while t:
        r, t = t, r % t
    return r


def _pollard_bren(c, b, z):
    w = (z ** 2) % b + c
    if w >= b:
        w -= b

    assert 0 <= w < b
    return w


def factorise_c(n, iterations=None):
    y, c, m = (randint(1, n - 1) for w in range(3))
    r, q, g = 1, 1, 1
    i = 0
    while g == 1:
        x = y
        for w in range(r):
            y = _pollard_bren(c, n, y)
        k = 0
        while k < r and g == 1:
            ys = y
            for _ in range(min(m, r - k)):
                y = _pollard_bren(c, n, y)
                q = (q * abs(x - y)) %  n
            g = GCDF(q, n)
            k += m
        r *= 2
        if iterations:
            i += 1
            if i == iterations:
                return None

    if g == n:
        while True:
            ys = _pollard_bren(c, n, ys)
            g = GCDF(abs(x - ys), n)
            if g > 1:
                break
    return g


if __name__ == '__main__':
    from sys import argv

    if len(argv) != 2:
        exit(1)

    with open(argv[1], "r") as f:
        for i in f:
            n = int(i[:-1])
            res = factorise_c(n)
            print("{}={}*{}".format(n, n // res, res))
